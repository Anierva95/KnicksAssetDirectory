{"version":3,"sources":["components/Header/header.js","components/TableRows/Tablerows.js","components/Table/table.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","className","TableRows","props","filteredByName","players","filter","player","First_Name","toUpperCase","indexOf","playerSearch","Last_Name","sortAssets","sort","a","b","Asset_Rank","sortFirst","sortLast","sortPosition","Position","playerRows","map","Description","Fragment","Table","toggleClassAsset","toggleClassFirst","toggleClassLast","toggleClassPosition","useState","sortAsset","updateSortAsset","updateSortFirst","updateSortLast","updateSortPosition","class","scope","name","onClick","App","playerName","updatePlayerName","style","marginTop","marginBottom","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4535fe99.chunk.js","sourcesContent":["import React from 'react';\nimport \"./header.css\"\n\nfunction Header() {\n    return(\n        <div className=\"header\">\n            <p>NY Knicks Player Directory</p>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport players from \"../../players.json\"\n\nfunction TableRows(props) {\n\n  // Filter names via the input\n  let filteredByName = players.filter(player => {\n    return (player.First_Name.toUpperCase().indexOf(props.playerSearch.toUpperCase()) === 0 || player.Last_Name.toUpperCase().indexOf(props.playerSearch.toUpperCase()) === 0 );\n  });\n\n  let sortedByAsset;\n  let sortedByFirstName;\n  let sortedByLastName;\n  let sortedByPosition;\n\n  if (props.sortAssets) {\n  sortedByAsset = filteredByName.sort((a,b) => {\n    if (a.Asset_Rank > b.Asset_Rank) {\n      return 1\n    } else if (a.Asset_Rank < b.Asset_Rank) {\n      return -1\n    }\n    return 0;\n  })} else {\n    sortedByAsset = filteredByName;\n  };\n\n  if (props.sortFirst) {\n    sortedByFirstName = filteredByName.sort((a,b) => {\n      if (a.First_Name > b.First_Name) {\n        return 1\n      } else if (a.First_Name < b.First_Name) {\n        return -1\n      }\n      return 0;\n    })} else {\n      sortedByFirstName = filteredByName;\n    };\n\n  if (props.sortLast) {\n    sortedByLastName = filteredByName.sort((a,b) => {\n      if (a.Last_Name > b.Last_Name) {\n        return 1\n      } else if (a.Last_Name < b.Last_Name) {\n        return -1\n      }\n      return 0;\n    })} else {\n      sortedByLastName = filteredByName;\n    };\n\n  if (props.sortPosition) {\n    sortedByPosition = filteredByName.sort((a,b) => {\n      if (a.Position > b.Position) {\n        return 1\n      } else if (a.Position < b.Position) {\n        return -1\n      }\n      return 0;\n    })} else {\n      sortedByPosition = filteredByName;\n    };\n\n\n\n\n\n  let playerRows = filteredByName.map(player => {\n    return (\n      <tr>\n      <td>{player.First_Name}</td>\n      <td>{player.Last_Name}</td>\n      <td>{player.Position}</td>\n      <td>{player.Asset_Rank}</td>\n      <td>{player.Description}</td>\n        </tr>\n    )\n  })\n\n    return(\n      <React.Fragment>\n        {playerRows}\n      </React.Fragment>\n    )\n}\n\nexport default TableRows;","import React, { useState } from 'react'\nimport TableRows from '../TableRows/Tablerows'\n\nfunction Table(props) {\n\n   const [sortAsset, updateSortAsset] = useState(false);\n   const [sortFirst, updateSortFirst] = useState(false);\n   const [sortLast, updateSortLast] = useState(false);\n   const [sortPosition, updateSortPosition] = useState(false);\n\n   const toggleSortAsset = () => {\n     updateSortAsset(!sortAsset);\n     updateSortFirst(false);\n     updateSortLast(false);\n     updateSortPosition(false);\n   }\n   const toggleSortFirst = () => {\n    updateSortFirst(!sortFirst);\n    updateSortAsset(false);\n    updateSortLast(false);\n    updateSortPosition(false);\n  }\n  const toggleSortLast = () => {\n    updateSortLast(!sortLast);\n    updateSortAsset(false);\n    updateSortFirst(false);\n    updateSortPosition(false);\n  }\n  const toggleSortPosition = () => {\n    updateSortPosition(!sortPosition)\n    updateSortAsset(false);\n    updateSortFirst(false);\n    updateSortLast(false);\n  }\n\n  let toggleClassAsset;\n  let toggleClassFirst;\n  let toggleClassLast;\n  let toggleClassPosition;\n\n  if (sortAsset) {\n  toggleClassAsset = 'orange';\n  } else {\n  toggleClassAsset = 'unToggled';\n  }\n  if (sortFirst) {\n  toggleClassFirst = 'orange';\n  } else {\n  toggleClassFirst = 'unToggled';\n  }\n  if (sortLast) {\n  toggleClassLast = 'orange';\n  } else {\n  toggleClassLast = 'unToggled';\n  }\n  if (sortPosition) {\n  toggleClassPosition = 'orange';\n  } else {\n  toggleClassPosition = 'unToggled';\n  }\n\n\n    return(\n    <div class=\"container table\">\n        <table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\" name=\"sortFirst\" onClick={toggleSortFirst} className={toggleClassFirst}>First Name</th>\n      <th scope=\"col\" name=\"sortLast\" onClick={toggleSortLast} className={toggleClassLast}>Last Name</th>\n      <th scope=\"col\" name=\"sortPosition\" onClick={toggleSortPosition} className={toggleClassPosition}>Position</th>\n      <th scope=\"col\" onClick={toggleSortAsset} className={toggleClassAsset}>Asset Rank</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n      <TableRows\n      playerSearch={props.playerSearch}\n      sortAssets={sortAsset}\n      sortFirst={sortFirst}\n      sortLast={sortLast}\n      sortPosition={sortPosition}\n      />\n  </tbody>\n</table>\n</div>\n    )\n}\n\nexport default Table","import React, { useState, useContext } from 'react';\nimport './App.css';\nimport Header from '../components/Header/header'\nimport Table from '../components/Table/table'\n\nfunction App() {\n\n  const [playerName, updatePlayerName] = useState(\"\");\n\n  const inputChangeHandler = (event) => {\n    updatePlayerName(event.target.value);\n  }\n\n  const style ={\n    marginTop: \"10px\",\n    marginBottom: \"18px\"\n  }\n  return (\n    <div className=\"App\">\n        <Header\n        />\n        <div className=\"nameSearch\">\n        <h3>Search by Name: </h3>\n        <input \n        style={style}\n        value={playerName}\n        onChange={inputChangeHandler}\n        />\n        </div>\n        <body>\n        </body>\n        <Table\n        playerSearch={playerName}\n        />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}